from .control import Control, ControlBase
from .event import GlobalEventObject, EventObject
from .state import StateBase
from .fl_class import _fl

class Component(StateBase, EventObject):
    """A base class that is used to group controls together to provide functionality. For example, you would create a TransportComponent by inheriting from this class.
        It has all the functionality to activate and deactivate controls, along with decorator functions for listening to control events, and FL studio generated events.
        A component makes it easy to group controls together and activate and deactivate them when necessary. Using this method you can create components for any functionality.
        When inheriting from this class, create as many controls as necessary as instance objects, use the Component.subscribe(), and Component.listens() decorators to react to those controls and FL events, and program you login in various methods.
    """
    def listens(event_path: str):
        """A static method the is used to listen to FL studio event and react to them by the function they are decorating. Upon component activation, each function that is decorated with Component.listens() will be registered in the global event object.
            Example: Component.listens("channels.selectedChannel"). This decorator will call the decorated function each time channels.selectedChannel is changed.
        """
        def dec(func):
            func.event_path = event_path
            return func
        return dec

    def subscribe(control_name: str, event: str):
        """A static method that is used to subscribe functions to control on the Component instance. Upon component activation, each function that is decorated with Component.subscribe will be subscribed using the global event object.
            This is how you listen to and react to event generated by controls. Example: Component.subscribe("play_button", "pressed" )"""
        def dec(func):
            func.control_name = control_name
            func.control_event = event
            return func
        return dec

    def __init__(self, name: str, auto_active: bool = True, *a, **k):
        super(Component, self).__init__(*a, **k)
        self.name: str = name
        """Component Name: Must be unique. The name is used when publishing events from this component."""
        self.global_event_object: GlobalEventObject = GlobalEventObject()
        """A reference to the global event registry"""
        self.auto_active: bool = auto_active
        "Whether or not to automatically activate this component upon declaration"
        self.fl = _fl
        """FL Studio modules object: This object hold a reference to all Fl Studio modules and functions."""

    def notify(self, event_name: str, *a, **k):
        """Helper method to publish event sourced form this component. The event_id is component_name.event. This is useful for communication between components if you need."""
        self.global_event_object.notify_listeners(
            '{}.{}'.format(self.name, event_name), *a, **k)

    def _control_subscribe(self):
        """Finds each function with the Decorator @Component.subscribe(control_name: str, event_id: str). Once found it binds the function to the control event specified in the decorator.
        It does this with the global event object. This is called at Component activation at Component.activate()"""
        for attr in dir(self):
            func = getattr(self, attr)
            if hasattr(func, 'control_event') and hasattr(func, 'control_name'):
                control_event = func.control_event
                instance_control_name = func.control_name

                # Get the control that was passed into the Component instance, and subscribe to it's events
                if hasattr(self, instance_control_name) and isinstance(getattr(self, func.control_name), ControlBase):
                    control: ControlBase = getattr(self, func.control_name)
                    self.global_event_object.subscribe('{}.{}'.format(control.name, control_event), func)

    def _control_unsubscribe(self):
        """Finds each function with the Decorator @Component.subscribe(control_name: str, event_id: str). Once found it unsubscribes the function to the control event specified in the decorator.
        It does on the global event object. This is called at deactivation with Component.deactivate()"""
        for attr in dir(self):
            func = getattr(self, attr)
            if hasattr(func, 'control_event') and hasattr(func, 'control_name'):
                control_event = func.control_event
                instance_control_name = func.control_name

                # Get the control that was passed into the Component instance, and unsubscribe to it's events
                if hasattr(self, instance_control_name) and isinstance(getattr(self, func.control_name), ControlBase):
                    control: ControlBase = getattr(self, func.control_name)
                    self.global_event_object.unsubscribe('{}.{}'.format(control.name, control_event), func)

    def _get_observers(self):
        """Get all functions on this Component instance that are decorated with @Component.listens(). """
        local_scope_observers = dict()
        for attr in dir(self):
            func = getattr(self, attr)
            if hasattr(func, 'event_path'):
                event_path = func.event_path
                if local_scope_observers.get(event_path) == None:
                    local_scope_observers[event_path] = []
                    local_scope_observers[event_path].append(func)
                else:
                    if func not in local_scope_observers[event_path]:
                        local_scope_observers[event_path].append(func)
        return local_scope_observers

    def _get_controls(self):
        """Gets all controls on this Component instance"""
        controls = dict()
        for attr in dir(self):
            control = getattr(self, attr)
            if isinstance(control, ControlBase):
                controls[attr] = control
        return controls

    def activate(self):
        """Activate this Component and all its controls. This method also subscribes to all control events listed in the Component.subscribe(decorator, and register all functions decorated with Component.listens()) """
        if self.isChanged('active', True):
            # Activate each control instance of this component
            self._control_subscribe()
            controls = self._get_controls()
            for control in controls:
                controls[control].activate()

            # Bind listener functions to event_path in main event loop
            observers = self._get_observers()
            for event_path in observers:
                for func in observers[event_path]:
                    self.global_event_object.subscribe(event_path, func)

    def deactivate(self):
        """Deactivate this Component and all its controls. This method also unsubscribes to all control events listed in the Component.subscribe(decorator, and unregister all functions decorated with Component.listens()) """
        if self.isChanged('active', False):
            # Deactivate Controls
            self._control_unsubscribe()
            controls: list[Control] = self._get_controls()
            for control in controls:
                controls[control].deactivate()

            # Unbind listener functions from event_path
            observers = self._get_observers()
            for event_path in observers:
                for func in observers[event_path]:
                    self.global_event_object.unsubscribe(event_path, func)
